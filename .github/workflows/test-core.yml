name: "Test suite"
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests
on:
  push:
    branches:
      - dev
      - release/*
    paths-ignore:
      - 'docs/**'
      - 'help/**'
  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - 'docs/**'
      - 'help/**'
      - 'packaging/**'
      - '.pkgr.yml'

permissions:
  contents: read

jobs:
  # units:
  #   if: github.repository == 'opf/openproject'
  #   name: Units
  #   runs-on: runs-on,runner=4cpu-linux-x64,family=c7i-flex+c7a,run-id=${{ github.run_id }}
  #   timeout-minutes: 20
  #   services:
  #     postgres:
  #       image: postgres:13
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: appdb
  #       ports:
  #         - 5432:5432

  #   env:
  #     RSPEC_RETRY_RETRY_COUNT: 2
  #     DATABASE_URL: postgres://postgres:postgres@localhost:5432/appdb
  #     PGUSER: postgres
  #     PGHOST: localhost
  #     PGPASSWORD: postgres

  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: ruby/setup-ruby@v1
  #     with:
  #       bundler-cache: true
  #   - name: Cache TEST RUNTIME
  #     uses: runs-on/cache@v4
  #     with:
  #       path: spec/support/runtime-logs
  #       key: runtime-logs-${{ github.head_ref || github.ref }}-${{ github.sha }}
  #       restore-keys: |
  #         runtime-logs-${{ github.head_ref || github.ref }}-
  #         runtime-logs-
  #   - name: Cache DB schema
  #     uses: runs-on/cache@v4
  #     id: db_schema_cache
  #     with:
  #       path: db/structure.sql
  #       key: db-schema-${{ hashFiles('db/**/*') }}
  #   - name: DB setup
  #     run: cp docker/ci/database.yml config/
  #   - name: DB migration
  #     if: steps.db_schema_cache.outputs.cache-hit != 'true'
  #     run: bin/rails db:create db:migrate db:schema:dump
  all:
    name: Units + Features
    if: github.repository == 'opf/openproject'
    runs-on: runs-on,runner=4cpu-linux-x64,family=c7i-flex+c7a,run-id=${{ github.run_id }}
    timeout-minutes: 40
    services:
      # Label used to access the service container
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: appdb
          # only available in postgres:16
          # POSTGRES_INITDB_ARGS: --no-sync --no-instructions --set fsync=off --set full_page_writes=off
        ports:
          - 5432:5432

    env:
      RSPEC_RETRY_RETRY_COUNT: 2
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/appdb
      PGUSER: postgres
      PGHOST: localhost
      PGPASSWORD: postgres
    steps:
    - uses: actions/checkout@v4
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - uses: actions/setup-node@v4
      with:
        node-version-file: 'package.json'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
    - name: Cache ANGULAR
      uses: runs-on/cache@v4
      with:
        path: frontend/.angular/cache
        key: angular-${{ hashFiles('package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          angular-
    - name: Cache TEST RUNTIME
      uses: runs-on/cache@v4
      with:
        path: spec/support/runtime-logs
        key: runtime-logs-${{ github.head_ref || github.ref }}-${{ github.sha }}
        restore-keys: |
          runtime-logs-${{ github.head_ref || github.ref }}-
          runtime-logs-
    - name: Cache DB schema
      uses: runs-on/cache@v4
      id: db_schema_cache
      with:
        path: db/structure.sql
        key: db-schema-${{ hashFiles('db/**/*') }}
    - name: DB setup
      run: cp docker/ci/database.yml config/
    - name: DB migration
      if: steps.db_schema_cache.outputs.cache-hit != 'true'
      run: bin/rails db:create db:migrate db:schema:dump
    - name: Precompile assets
      run: |
        npm config set audit=false fund=false
        cd frontend && npm ci && cd -
        DATABASE_URL=nulldb://db time bin/rails openproject:plugins:register_frontend assets:precompile
        cp -rp config/frontend_assets.manifest.json public/assets/frontend_assets.manifest.json
    - name: Reset DBs
      run: ./docker/ci/reset-dbs.sh
    - name: Zeitwerk check
      run: bin/rails zeitwerk:check
    - name: APIv3 specification (OpenAPI 3.0)
      run:  ./script/api/validate_spec
    - name: Unit tests
      run: |
        shopt -s extglob
        time bundle exec turbo_tests --verbose -n $(nproc) --runtime-log spec/support/runtime-logs/turbo_runtime_units.log spec/!(features) modules/**/spec/!(features)
    # - name: Feature tests
    #   env:
    #     CAPYBARA_DOWNLOADED_FILE_DIR: /tmp/ci/downloads
    #     CAPYBARA_AWS_ACCESS_KEY_ID: "${{ secrets.CAPYBARA_AWS_ACCESS_KEY_ID }}"
    #     CAPYBARA_AWS_SECRET_ACCESS_KEY: "${{ secrets.CAPYBARA_AWS_SECRET_ACCESS_KEY }}"
    #   run: bin/ci run-features

# github.head_ref is only availabe in PR context and if it is absent then github.run_id
# is used . And github.run_id is unique for each workflow run. So, this option makes
# sure that there is only one build running for a pull request and the build is attached
# to the last commit of the PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
